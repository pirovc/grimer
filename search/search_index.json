{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GRIMER About GRIMER performs analysis of microbiome data and generates a portable and interactive dashboard integrating annotation, taxonomy and metadata with focus on contamination detection. More information about the method can be found in the pre-print Examples Online examples of reports generated with GRIMER --> https://pirovc.github.io/grimer-reports/ Installation Via conda conda install -c bioconda -c conda-forge grimer or locally installing only dependencies via conda: git clone https://github.com/pirovc/grimer.git cd grimer conda env create -f env.yaml # or mamba env create -f env.yaml conda activate grimer # or source activate grimer python setup.py install --record files.txt # Uninstall: xargs rm -rf < files.txt grimer -h Basic Usage Tab-separated input table grimer -i input_table.tsv BIOM file grimer -i myfile.biom Tab-separated input table with taxonomic annotated observations (e.g. sk__Bacteria;k__;p__Actinobacteria;c__Actinobacteria...) grimer -i input_table.tsv -f \";\" Tab-separated input table with metadata grimer -i input_table.tsv -m metadata.tsv With taxonomy integration (ncbi) grimer -i input_table.tsv -m metadata.tsv -t ncbi #optional -b taxdump.tar.gz With configuration file to setup external tools, references and annotations grimer -i input_table.tsv -m metadata.tsv -t ncbi -c config/default.yaml -d -g Analyzing any MGnify public study ./grimer-mgnify.py -i MGYS00006024 -o output_folder/ Config file ..TODO.. Parameters grimer optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit required arguments: -i INPUT_FILE, --input-file INPUT_FILE Main input table with counts (Observation table, Count table, Contingency Tables, ...) or .biom file. By default rows contain observations and columns contain samples (use --tranpose if your file is reversed). First column and first row are used as headers. main arguments: -m METADATA_FILE, --metadata-file METADATA_FILE Input metadata file in simple tabular format with samples in rows and metadata fields in columns. QIIME 2 metadata format is also accepted, with an extra row to define categorical and numerical fields. If not provided and --input-file is a .biom files, will attempt to get metadata from it. -t {ncbi,gtdb,silva,greengenes,ott}, --taxonomy {ncbi,gtdb,silva,greengenes,ott} Define taxonomy to convert entry and annotate samples. Will automatically download and parse or files can be provided with --tax-files. -b [TAX_FILES ...], --tax-files [TAX_FILES ...] Optional specific taxonomy files to use. -r [RANKS ...], --ranks [RANKS ...] Taxonomic ranks to generate visualizations. Use 'default' to use entries from the table directly. Default: default -c CONFIG, --config CONFIG Configuration file with definitions of references, controls and external tools. output arguments: -g, --mgnify Plot MGnify chart -d, --decontam Run and plot DECONTAM -l TITLE, --title TITLE Title to display on the header of the report. -p [{overview,samples,heatmap,correlation} ...], --output-plots [{overview,samples,heatmap,correlation} ...] Plots to generate. Default: overview,samples,heatmap,correlation -o OUTPUT_HTML, --output-html OUTPUT_HTML File to output report. Default: output.html --full-offline Embed javascript library in the output file. File will be around 1.5MB bigger but also work without internet connection. That way your report will live forever. general data options: -f LEVEL_SEPARATOR, --level-separator LEVEL_SEPARATOR If provided, consider --input-table to be a hierarchical multi-level table where the observations headers are separated by the indicated separator characther (usually ';' or '|') -y VALUES, --values VALUES Force 'count' or 'normalized' data parsing. Empty to auto-detect. -w, --cumm-levels Activate if input table has already cummulative values among levels. -s, --transpose Transpose --input-table (if samples are listed on columns and observations on rows) -u [UNASSIGNED_HEADER ...], --unassigned-header [UNASSIGNED_HEADER ...] Define one or more header names containing unsassinged/unclassified counts. --obs-replace [OBS_REPLACE ...] Replace values on table observations labels/headers (support regex). Example: '_' ' ' will replace underscore with spaces, '^.+__' '' will remove the matching regex. --sample-replace [SAMPLE_REPLACE ...] Replace values on table sample labels/headers (support regex). Example: '_' ' ' will replace underscore with spaces, '^.+__' '' will remove the matching regex. -z REPLACE_ZEROS, --replace-zeros REPLACE_ZEROS INT (add 'smallest count'/INT to every raw count), FLOAT (add FLOAT to every raw count). Default: 1000 --min-frequency MIN_FREQUENCY Define minimum number/percentage of samples containing an observation to keep the observation [values between 0-1 for percentage, >1 specific number]. --max-frequency MAX_FREQUENCY Define maximum number/percentage of samples containing an observation to keep the observation [values between 0-1 for percentage, >1 specific number]. --min-count MIN_COUNT Define minimum number/percentage of counts to keep an observation [values between 0-1 for percentage, >1 specific number]. --max-count MAX_COUNT Define maximum number/percentage of counts to keep an observation [values between 0-1 for percentage, >1 specific number]. Samples options: -j TOP_OBS_BARS, --top-obs-bars TOP_OBS_BARS Top abundant observations to show in the bars. Heatmap and clustering options: -a TRANSFORMATION, --transformation TRANSFORMATION none (counts), norm (percentage), log (log10), clr (centre log ratio). Default: log -e METADATA_COLS, --metadata-cols METADATA_COLS How many metadata cols to show on the heatmap. Higher values makes plot slower to navigate. --optimal-ordering Activate optimal_ordering on linkage, takes longer for large number of samples. --show-zeros Do not skip zeros on heatmap. File will be bigger and iteraction with heatmap slower. --linkage-methods [{single,complete,average,centroid,median,ward,weighted} ...] --linkage-metrics [{braycurtis,canberra,chebyshev,cityblock,correlation,cosine,dice,euclidean,hamming,jaccard,jensenshannon,kulsinski,mahalanobis,minkowski,rogerstanimoto,russellrao,seuclidean,sokalmichener,sokalsneath,sqeuclidean,wminkowski,yule} ...] --skip-dendrogram Disable dendogram. Will create smaller files. Correlation options: -x TOP_OBS_CORR, --top-obs-corr TOP_OBS_CORR Top abundant observations to build the correlationn matrix, based on the avg. percentage counts/sample. 0 for all Powered by","title":"GRIMER"},{"location":"#grimer","text":"","title":"GRIMER"},{"location":"#about","text":"GRIMER performs analysis of microbiome data and generates a portable and interactive dashboard integrating annotation, taxonomy and metadata with focus on contamination detection. More information about the method can be found in the pre-print","title":"About"},{"location":"#examples","text":"Online examples of reports generated with GRIMER --> https://pirovc.github.io/grimer-reports/","title":"Examples"},{"location":"#installation","text":"Via conda conda install -c bioconda -c conda-forge grimer or locally installing only dependencies via conda: git clone https://github.com/pirovc/grimer.git cd grimer conda env create -f env.yaml # or mamba env create -f env.yaml conda activate grimer # or source activate grimer python setup.py install --record files.txt # Uninstall: xargs rm -rf < files.txt grimer -h","title":"Installation"},{"location":"#basic-usage","text":"Tab-separated input table grimer -i input_table.tsv BIOM file grimer -i myfile.biom Tab-separated input table with taxonomic annotated observations (e.g. sk__Bacteria;k__;p__Actinobacteria;c__Actinobacteria...) grimer -i input_table.tsv -f \";\" Tab-separated input table with metadata grimer -i input_table.tsv -m metadata.tsv With taxonomy integration (ncbi) grimer -i input_table.tsv -m metadata.tsv -t ncbi #optional -b taxdump.tar.gz With configuration file to setup external tools, references and annotations grimer -i input_table.tsv -m metadata.tsv -t ncbi -c config/default.yaml -d -g Analyzing any MGnify public study ./grimer-mgnify.py -i MGYS00006024 -o output_folder/","title":"Basic Usage"},{"location":"#config-file","text":"..TODO..","title":"Config file"},{"location":"#parameters","text":"grimer optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit required arguments: -i INPUT_FILE, --input-file INPUT_FILE Main input table with counts (Observation table, Count table, Contingency Tables, ...) or .biom file. By default rows contain observations and columns contain samples (use --tranpose if your file is reversed). First column and first row are used as headers. main arguments: -m METADATA_FILE, --metadata-file METADATA_FILE Input metadata file in simple tabular format with samples in rows and metadata fields in columns. QIIME 2 metadata format is also accepted, with an extra row to define categorical and numerical fields. If not provided and --input-file is a .biom files, will attempt to get metadata from it. -t {ncbi,gtdb,silva,greengenes,ott}, --taxonomy {ncbi,gtdb,silva,greengenes,ott} Define taxonomy to convert entry and annotate samples. Will automatically download and parse or files can be provided with --tax-files. -b [TAX_FILES ...], --tax-files [TAX_FILES ...] Optional specific taxonomy files to use. -r [RANKS ...], --ranks [RANKS ...] Taxonomic ranks to generate visualizations. Use 'default' to use entries from the table directly. Default: default -c CONFIG, --config CONFIG Configuration file with definitions of references, controls and external tools. output arguments: -g, --mgnify Plot MGnify chart -d, --decontam Run and plot DECONTAM -l TITLE, --title TITLE Title to display on the header of the report. -p [{overview,samples,heatmap,correlation} ...], --output-plots [{overview,samples,heatmap,correlation} ...] Plots to generate. Default: overview,samples,heatmap,correlation -o OUTPUT_HTML, --output-html OUTPUT_HTML File to output report. Default: output.html --full-offline Embed javascript library in the output file. File will be around 1.5MB bigger but also work without internet connection. That way your report will live forever. general data options: -f LEVEL_SEPARATOR, --level-separator LEVEL_SEPARATOR If provided, consider --input-table to be a hierarchical multi-level table where the observations headers are separated by the indicated separator characther (usually ';' or '|') -y VALUES, --values VALUES Force 'count' or 'normalized' data parsing. Empty to auto-detect. -w, --cumm-levels Activate if input table has already cummulative values among levels. -s, --transpose Transpose --input-table (if samples are listed on columns and observations on rows) -u [UNASSIGNED_HEADER ...], --unassigned-header [UNASSIGNED_HEADER ...] Define one or more header names containing unsassinged/unclassified counts. --obs-replace [OBS_REPLACE ...] Replace values on table observations labels/headers (support regex). Example: '_' ' ' will replace underscore with spaces, '^.+__' '' will remove the matching regex. --sample-replace [SAMPLE_REPLACE ...] Replace values on table sample labels/headers (support regex). Example: '_' ' ' will replace underscore with spaces, '^.+__' '' will remove the matching regex. -z REPLACE_ZEROS, --replace-zeros REPLACE_ZEROS INT (add 'smallest count'/INT to every raw count), FLOAT (add FLOAT to every raw count). Default: 1000 --min-frequency MIN_FREQUENCY Define minimum number/percentage of samples containing an observation to keep the observation [values between 0-1 for percentage, >1 specific number]. --max-frequency MAX_FREQUENCY Define maximum number/percentage of samples containing an observation to keep the observation [values between 0-1 for percentage, >1 specific number]. --min-count MIN_COUNT Define minimum number/percentage of counts to keep an observation [values between 0-1 for percentage, >1 specific number]. --max-count MAX_COUNT Define maximum number/percentage of counts to keep an observation [values between 0-1 for percentage, >1 specific number]. Samples options: -j TOP_OBS_BARS, --top-obs-bars TOP_OBS_BARS Top abundant observations to show in the bars. Heatmap and clustering options: -a TRANSFORMATION, --transformation TRANSFORMATION none (counts), norm (percentage), log (log10), clr (centre log ratio). Default: log -e METADATA_COLS, --metadata-cols METADATA_COLS How many metadata cols to show on the heatmap. Higher values makes plot slower to navigate. --optimal-ordering Activate optimal_ordering on linkage, takes longer for large number of samples. --show-zeros Do not skip zeros on heatmap. File will be bigger and iteraction with heatmap slower. --linkage-methods [{single,complete,average,centroid,median,ward,weighted} ...] --linkage-metrics [{braycurtis,canberra,chebyshev,cityblock,correlation,cosine,dice,euclidean,hamming,jaccard,jensenshannon,kulsinski,mahalanobis,minkowski,rogerstanimoto,russellrao,seuclidean,sokalmichener,sokalsneath,sqeuclidean,wminkowski,yule} ...] --skip-dendrogram Disable dendogram. Will create smaller files. Correlation options: -x TOP_OBS_CORR, --top-obs-corr TOP_OBS_CORR Top abundant observations to build the correlationn matrix, based on the avg. percentage counts/sample. 0 for all","title":"Parameters"},{"location":"#powered-by","text":"","title":"Powered by"},{"location":"importing/","text":"Importing files GRIMER is independent of any quantification method and requires a contingency table with raw counts of observations/components for each samples/compositions in the study. Observations are usually, but not limited to, taxonomic entries (e.g. genus, species, strains), operational taxonomic units (OTUs), amplicon sequence variants (ASVs), metagenome-assembled genomes (MAGs) or sequence features. GRIMER --input-file receives a tab-separated text file with a table of counts (Observation table, Count table, Contingency Tables, ...) or a BIOM file. Rows contain observations and columns contain samples (use --transpose if your file is reversed) First column and first row are used as headers Taxonomy integration: files can have either taxonomic identifiers (NCBI, e.g.: 562) or taxonomic names (NCBI, e.g.: Escherichia coli or GTDB, e.g.: s__Escherichia coli) biom file GRIMER parses BIOM files and affiliated metadata (if available). Alternatively, an external metadata file can be provided with -m/--metadata . Example UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom file from microbiomedb.org Default report (no taxonomy) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom With integrated NCBI taxonomy (will translate names to taxids) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species tab-separated file (.tsv) GRIMER parses .tsv files with single taxonomic identifier/names annotations or with multi-level (e.g.: lineage) taxonomic annotated observations. Multi-level annotations (e.g. Bacteria;Proteobacteria;Gammaproteobacteria...) Example UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv file from microbiomedb.org grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" With metadata ( UgandaMaternalV3V4.16s_DADA2.sample_details.tsv ) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" \\ --metadata-file UgandaMaternalV3V4.16s_DADA2.sample_details.tsv With integrated NCBI taxonomy (will translate names to taxids) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" \\ --metadata-file UgandaMaternalV3V4.16s_DADA2.sample_details.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species Single level annotations (e.g. Neisseria animalis) Example ERP108433_phylum_taxonomy_abundances_SSU_v4.1.tsv from MGnify , phylum level only # Removing first column with kingdom cut -f 2- ERP108433_phylum_taxonomy_abundances_SSU_v4.1.tsv > ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv # Set identifier for unassigned observations as \"Unassigned\" (many occurences, will be summed) grimer --input-file ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv \\ --unassigned-header \"Unassigned\" Re-generating taxonomic lineage from single annotations (in this case only superkingdom) grimer --input-file ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv \\ --unassigned-header \"Unassigned\" \\ --taxonomy ncbi \\ --ranks superkingdom phylum Special cases --obs-replace --sample-replace --cumm-levels --transpose From commonly used tools/sources ganon ganon table --input *.tre \\ --output-file ganon_table.tsv \\ --header taxid \\ --rank species grimer --input-file ganon_table.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species MetaPhlAn # merge_metaphlan_tables.py is available with the metaphlan package merge_metaphlan_tables.py *.tsv | head -n+2 > metaphlan_table.tsv grimer --input-file metaphlan_table.tsv \\ --level-separator \"|\" \\ --obs-replace '^.+__' '' '_' ' ' \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species QIIME2 feature table (.qza) Example feature-table.qza from QIIME2 docs qiime tools export --input-path feature-table.qza --output-path exported-feature-table grimer --input-file exported-feature-table/feature-table.biom MGnify grimer-mgnify.py will download and generate a GRIMER report for any MGnify study accession (e.g. MGYS00006024) ./grimer-mgnify.py -i MGYS00006024 -o out_folder_mgnify/ phyloseq #source(\"http://bioconductor.org/biocLite.R\") #biocLite(\"biomformat\") #biocLite('phyloseq') library(\"biomformat\") library('phyloseq') data(soilrep) b <- make_biom(data = otu_table(soilrep)) write_biom(b, 'out.biom') grimer --input-file out.biom GTDB-tk CoverM","title":"Importing files"},{"location":"importing/#importing-files","text":"GRIMER is independent of any quantification method and requires a contingency table with raw counts of observations/components for each samples/compositions in the study. Observations are usually, but not limited to, taxonomic entries (e.g. genus, species, strains), operational taxonomic units (OTUs), amplicon sequence variants (ASVs), metagenome-assembled genomes (MAGs) or sequence features. GRIMER --input-file receives a tab-separated text file with a table of counts (Observation table, Count table, Contingency Tables, ...) or a BIOM file. Rows contain observations and columns contain samples (use --transpose if your file is reversed) First column and first row are used as headers Taxonomy integration: files can have either taxonomic identifiers (NCBI, e.g.: 562) or taxonomic names (NCBI, e.g.: Escherichia coli or GTDB, e.g.: s__Escherichia coli)","title":"Importing files"},{"location":"importing/#biom-file","text":"GRIMER parses BIOM files and affiliated metadata (if available). Alternatively, an external metadata file can be provided with -m/--metadata . Example UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom file from microbiomedb.org Default report (no taxonomy) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom With integrated NCBI taxonomy (will translate names to taxids) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species","title":"biom file"},{"location":"importing/#tab-separated-file-tsv","text":"GRIMER parses .tsv files with single taxonomic identifier/names annotations or with multi-level (e.g.: lineage) taxonomic annotated observations.","title":"tab-separated file (.tsv)"},{"location":"importing/#multi-level-annotations-eg-bacteriaproteobacteriagammaproteobacteria","text":"Example UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv file from microbiomedb.org grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" With metadata ( UgandaMaternalV3V4.16s_DADA2.sample_details.tsv ) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" \\ --metadata-file UgandaMaternalV3V4.16s_DADA2.sample_details.tsv With integrated NCBI taxonomy (will translate names to taxids) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" \\ --metadata-file UgandaMaternalV3V4.16s_DADA2.sample_details.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species","title":"Multi-level annotations (e.g. Bacteria;Proteobacteria;Gammaproteobacteria...)"},{"location":"importing/#single-level-annotations-eg-neisseria-animalis","text":"Example ERP108433_phylum_taxonomy_abundances_SSU_v4.1.tsv from MGnify , phylum level only # Removing first column with kingdom cut -f 2- ERP108433_phylum_taxonomy_abundances_SSU_v4.1.tsv > ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv # Set identifier for unassigned observations as \"Unassigned\" (many occurences, will be summed) grimer --input-file ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv \\ --unassigned-header \"Unassigned\" Re-generating taxonomic lineage from single annotations (in this case only superkingdom) grimer --input-file ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv \\ --unassigned-header \"Unassigned\" \\ --taxonomy ncbi \\ --ranks superkingdom phylum","title":"Single level annotations (e.g. Neisseria animalis)"},{"location":"importing/#special-cases","text":"--obs-replace --sample-replace --cumm-levels --transpose","title":"Special cases"},{"location":"importing/#from-commonly-used-toolssources","text":"","title":"From commonly used tools/sources"},{"location":"importing/#ganon","text":"ganon table --input *.tre \\ --output-file ganon_table.tsv \\ --header taxid \\ --rank species grimer --input-file ganon_table.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species","title":"ganon"},{"location":"importing/#metaphlan","text":"# merge_metaphlan_tables.py is available with the metaphlan package merge_metaphlan_tables.py *.tsv | head -n+2 > metaphlan_table.tsv grimer --input-file metaphlan_table.tsv \\ --level-separator \"|\" \\ --obs-replace '^.+__' '' '_' ' ' \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species","title":"MetaPhlAn"},{"location":"importing/#qiime2-feature-table-qza","text":"Example feature-table.qza from QIIME2 docs qiime tools export --input-path feature-table.qza --output-path exported-feature-table grimer --input-file exported-feature-table/feature-table.biom","title":"QIIME2 feature table (.qza)"},{"location":"importing/#mgnify","text":"grimer-mgnify.py will download and generate a GRIMER report for any MGnify study accession (e.g. MGYS00006024) ./grimer-mgnify.py -i MGYS00006024 -o out_folder_mgnify/","title":"MGnify"},{"location":"importing/#phyloseq","text":"#source(\"http://bioconductor.org/biocLite.R\") #biocLite(\"biomformat\") #biocLite('phyloseq') library(\"biomformat\") library('phyloseq') data(soilrep) b <- make_biom(data = otu_table(soilrep)) write_biom(b, 'out.biom') grimer --input-file out.biom","title":"phyloseq"},{"location":"importing/#gtdb-tk","text":"","title":"GTDB-tk"},{"location":"importing/#coverm","text":"","title":"CoverM"},{"location":"manual/","text":"GRIMER Reports - User Manual Overview Table, filtering table contents, selecting taxa Info, References, MGnify, DECONTAM plots Bars: annotations, sorting, grouping, transforming axis Samples Heatmap Correlation","title":"GRIMER Reports - User Manual"},{"location":"manual/#grimer-reports-user-manual","text":"","title":"GRIMER Reports - User Manual"},{"location":"manual/#overview","text":"Table, filtering table contents, selecting taxa Info, References, MGnify, DECONTAM plots Bars: annotations, sorting, grouping, transforming axis","title":"Overview"},{"location":"manual/#samples","text":"","title":"Samples"},{"location":"manual/#heatmap","text":"","title":"Heatmap"},{"location":"manual/#correlation","text":"","title":"Correlation"}]}