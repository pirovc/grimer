{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GRIMER About GRIMER is a tool that performs automated analyses and generates a portable and interactive dashboard integrating annotation, taxonomy and metadata. It unifies several sources of evidence to help detect contamination. GRIMER is independent of quantification methods and directly analyses contingency tables to create an interactive and offline report. Reports can be created in seconds and are accessible for non-specialists, providing an intuitive set of charts to explore data distribution among observations and samples and its connections with external sources. More information about the method can be found in the pre-print Installation Via conda conda install -c bioconda -c conda-forge grimer or locally installing only dependencies via conda: git clone https://github.com/pirovc/grimer.git cd grimer conda env create -f env.yaml # or mamba env create -f env.yaml conda activate grimer # or source activate grimer python setup.py install --record files.txt # Uninstall: xargs rm -rf < files.txt grimer -h Basic Usage Complete commands with sample files can be found in Importing files Tab-separated input table grimer -i input_table.tsv BIOM file grimer -i myfile.biom Tab-separated input table with taxonomic annotated observations (e.g. sk__Bacteria;k__;p__Actinobacteria;c__Actinobacteria...) grimer -i input_table.tsv -f \";\" Tab-separated input table with metadata grimer -i input_table.tsv -m metadata.tsv With taxonomy integration (ncbi) grimer -i input_table.tsv -m metadata.tsv -t ncbi #optional -b taxdump.tar.gz With configuration file to setup external tools, references and annotations grimer -i input_table.tsv -m metadata.tsv -t ncbi -c config/default.yaml -d -g Parameters grimer optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit required arguments: -i INPUT_FILE, --input-file INPUT_FILE Main input table with counts (Observation table, Count table, Contingency Tables, ...) or .biom file. By default rows contain observations and columns contain samples (use --tranpose if your file is reversed). First column and first row are used as headers. main arguments: -m METADATA_FILE, --metadata-file METADATA_FILE Input metadata file in simple tabular format with samples in rows and metadata fields in columns. QIIME 2 metadata format is also accepted, with an extra row to define categorical and numerical fields. If not provided and --input-file is a .biom files, will attempt to get metadata from it. -t {ncbi,gtdb,silva,greengenes,ott}, --taxonomy {ncbi,gtdb,silva,greengenes,ott} Define taxonomy to convert entry and annotate samples. Will automatically download and parse or files can be provided with --tax-files. -b [TAX_FILES ...], --tax-files [TAX_FILES ...] Optional specific taxonomy files to use. -r [RANKS ...], --ranks [RANKS ...] Taxonomic ranks to generate visualizations. Use 'default' to use entries from the table directly. Default: default -c CONFIG, --config CONFIG Configuration file with definitions of references, controls and external tools. output arguments: -g, --mgnify Plot MGnify chart -d, --decontam Run and plot DECONTAM -l TITLE, --title TITLE Title to display on the header of the report. -p [{overview,samples,heatmap,correlation} ...], --output-plots [{overview,samples,heatmap,correlation} ...] Plots to generate. Default: overview,samples,heatmap,correlation -o OUTPUT_HTML, --output-html OUTPUT_HTML File to output report. Default: output.html --full-offline Embed javascript library in the output file. File will be around 1.5MB bigger but also work without internet connection. That way your report will live forever. general data options: -f LEVEL_SEPARATOR, --level-separator LEVEL_SEPARATOR If provided, consider --input-table to be a hierarchical multi-level table where the observations headers are separated by the indicated separator characther (usually ';' or '|') -y VALUES, --values VALUES Force 'count' or 'normalized' data parsing. Empty to auto-detect. -w, --cumm-levels Activate if input table has already cummulative values among levels. -s, --transpose Transpose --input-table (if samples are listed on columns and observations on rows) -u [UNASSIGNED_HEADER ...], --unassigned-header [UNASSIGNED_HEADER ...] Define one or more header names containing unsassinged/unclassified counts. --obs-replace [OBS_REPLACE ...] Replace values on table observations labels/headers (support regex). Example: '_' ' ' will replace underscore with spaces, '^.+__' '' will remove the matching regex. --sample-replace [SAMPLE_REPLACE ...] Replace values on table sample labels/headers (support regex). Example: '_' ' ' will replace underscore with spaces, '^.+__' '' will remove the matching regex. -z REPLACE_ZEROS, --replace-zeros REPLACE_ZEROS INT (add 'smallest count'/INT to every raw count), FLOAT (add FLOAT to every raw count). Default: 1000 --min-frequency MIN_FREQUENCY Define minimum number/percentage of samples containing an observation to keep the observation [values between 0-1 for percentage, >1 specific number]. --max-frequency MAX_FREQUENCY Define maximum number/percentage of samples containing an observation to keep the observation [values between 0-1 for percentage, >1 specific number]. --min-count MIN_COUNT Define minimum number/percentage of counts to keep an observation [values between 0-1 for percentage, >1 specific number]. --max-count MAX_COUNT Define maximum number/percentage of counts to keep an observation [values between 0-1 for percentage, >1 specific number]. Samples options: -j TOP_OBS_BARS, --top-obs-bars TOP_OBS_BARS Top abundant observations to show in the bars. Heatmap and clustering options: -a TRANSFORMATION, --transformation TRANSFORMATION none (counts), norm (percentage), log (log10), clr (centre log ratio). Default: log -e METADATA_COLS, --metadata-cols METADATA_COLS How many metadata cols to show on the heatmap. Higher values makes plot slower to navigate. --optimal-ordering Activate optimal_ordering on linkage, takes longer for large number of samples. --show-zeros Do not skip zeros on heatmap. File will be bigger and iteraction with heatmap slower. --linkage-methods [{single,complete,average,centroid,median,ward,weighted} ...] --linkage-metrics [{braycurtis,canberra,chebyshev,cityblock,correlation,cosine,dice,euclidean,hamming,jaccard,jensenshannon,kulsinski,mahalanobis,minkowski,rogerstanimoto,russellrao,seuclidean,sokalmichener,sokalsneath,sqeuclidean,wminkowski,yule} ...] --skip-dendrogram Disable dendogram. Will create smaller files. Correlation options: -x TOP_OBS_CORR, --top-obs-corr TOP_OBS_CORR Top abundant observations to build the correlationn matrix, based on the avg. percentage counts/sample. 0 for all Powered by","title":"GRIMER"},{"location":"#grimer","text":"","title":"GRIMER"},{"location":"#about","text":"GRIMER is a tool that performs automated analyses and generates a portable and interactive dashboard integrating annotation, taxonomy and metadata. It unifies several sources of evidence to help detect contamination. GRIMER is independent of quantification methods and directly analyses contingency tables to create an interactive and offline report. Reports can be created in seconds and are accessible for non-specialists, providing an intuitive set of charts to explore data distribution among observations and samples and its connections with external sources. More information about the method can be found in the pre-print","title":"About"},{"location":"#installation","text":"Via conda conda install -c bioconda -c conda-forge grimer or locally installing only dependencies via conda: git clone https://github.com/pirovc/grimer.git cd grimer conda env create -f env.yaml # or mamba env create -f env.yaml conda activate grimer # or source activate grimer python setup.py install --record files.txt # Uninstall: xargs rm -rf < files.txt grimer -h","title":"Installation"},{"location":"#basic-usage","text":"Complete commands with sample files can be found in Importing files Tab-separated input table grimer -i input_table.tsv BIOM file grimer -i myfile.biom Tab-separated input table with taxonomic annotated observations (e.g. sk__Bacteria;k__;p__Actinobacteria;c__Actinobacteria...) grimer -i input_table.tsv -f \";\" Tab-separated input table with metadata grimer -i input_table.tsv -m metadata.tsv With taxonomy integration (ncbi) grimer -i input_table.tsv -m metadata.tsv -t ncbi #optional -b taxdump.tar.gz With configuration file to setup external tools, references and annotations grimer -i input_table.tsv -m metadata.tsv -t ncbi -c config/default.yaml -d -g","title":"Basic Usage"},{"location":"#parameters","text":"grimer optional arguments: -h, --help show this help message and exit -v, --version show program's version number and exit required arguments: -i INPUT_FILE, --input-file INPUT_FILE Main input table with counts (Observation table, Count table, Contingency Tables, ...) or .biom file. By default rows contain observations and columns contain samples (use --tranpose if your file is reversed). First column and first row are used as headers. main arguments: -m METADATA_FILE, --metadata-file METADATA_FILE Input metadata file in simple tabular format with samples in rows and metadata fields in columns. QIIME 2 metadata format is also accepted, with an extra row to define categorical and numerical fields. If not provided and --input-file is a .biom files, will attempt to get metadata from it. -t {ncbi,gtdb,silva,greengenes,ott}, --taxonomy {ncbi,gtdb,silva,greengenes,ott} Define taxonomy to convert entry and annotate samples. Will automatically download and parse or files can be provided with --tax-files. -b [TAX_FILES ...], --tax-files [TAX_FILES ...] Optional specific taxonomy files to use. -r [RANKS ...], --ranks [RANKS ...] Taxonomic ranks to generate visualizations. Use 'default' to use entries from the table directly. Default: default -c CONFIG, --config CONFIG Configuration file with definitions of references, controls and external tools. output arguments: -g, --mgnify Plot MGnify chart -d, --decontam Run and plot DECONTAM -l TITLE, --title TITLE Title to display on the header of the report. -p [{overview,samples,heatmap,correlation} ...], --output-plots [{overview,samples,heatmap,correlation} ...] Plots to generate. Default: overview,samples,heatmap,correlation -o OUTPUT_HTML, --output-html OUTPUT_HTML File to output report. Default: output.html --full-offline Embed javascript library in the output file. File will be around 1.5MB bigger but also work without internet connection. That way your report will live forever. general data options: -f LEVEL_SEPARATOR, --level-separator LEVEL_SEPARATOR If provided, consider --input-table to be a hierarchical multi-level table where the observations headers are separated by the indicated separator characther (usually ';' or '|') -y VALUES, --values VALUES Force 'count' or 'normalized' data parsing. Empty to auto-detect. -w, --cumm-levels Activate if input table has already cummulative values among levels. -s, --transpose Transpose --input-table (if samples are listed on columns and observations on rows) -u [UNASSIGNED_HEADER ...], --unassigned-header [UNASSIGNED_HEADER ...] Define one or more header names containing unsassinged/unclassified counts. --obs-replace [OBS_REPLACE ...] Replace values on table observations labels/headers (support regex). Example: '_' ' ' will replace underscore with spaces, '^.+__' '' will remove the matching regex. --sample-replace [SAMPLE_REPLACE ...] Replace values on table sample labels/headers (support regex). Example: '_' ' ' will replace underscore with spaces, '^.+__' '' will remove the matching regex. -z REPLACE_ZEROS, --replace-zeros REPLACE_ZEROS INT (add 'smallest count'/INT to every raw count), FLOAT (add FLOAT to every raw count). Default: 1000 --min-frequency MIN_FREQUENCY Define minimum number/percentage of samples containing an observation to keep the observation [values between 0-1 for percentage, >1 specific number]. --max-frequency MAX_FREQUENCY Define maximum number/percentage of samples containing an observation to keep the observation [values between 0-1 for percentage, >1 specific number]. --min-count MIN_COUNT Define minimum number/percentage of counts to keep an observation [values between 0-1 for percentage, >1 specific number]. --max-count MAX_COUNT Define maximum number/percentage of counts to keep an observation [values between 0-1 for percentage, >1 specific number]. Samples options: -j TOP_OBS_BARS, --top-obs-bars TOP_OBS_BARS Top abundant observations to show in the bars. Heatmap and clustering options: -a TRANSFORMATION, --transformation TRANSFORMATION none (counts), norm (percentage), log (log10), clr (centre log ratio). Default: log -e METADATA_COLS, --metadata-cols METADATA_COLS How many metadata cols to show on the heatmap. Higher values makes plot slower to navigate. --optimal-ordering Activate optimal_ordering on linkage, takes longer for large number of samples. --show-zeros Do not skip zeros on heatmap. File will be bigger and iteraction with heatmap slower. --linkage-methods [{single,complete,average,centroid,median,ward,weighted} ...] --linkage-metrics [{braycurtis,canberra,chebyshev,cityblock,correlation,cosine,dice,euclidean,hamming,jaccard,jensenshannon,kulsinski,mahalanobis,minkowski,rogerstanimoto,russellrao,seuclidean,sokalmichener,sokalsneath,sqeuclidean,wminkowski,yule} ...] --skip-dendrogram Disable dendogram. Will create smaller files. Correlation options: -x TOP_OBS_CORR, --top-obs-corr TOP_OBS_CORR Top abundant observations to build the correlationn matrix, based on the avg. percentage counts/sample. 0 for all","title":"Parameters"},{"location":"#powered-by","text":"","title":"Powered by"},{"location":"config/","text":"Config files GRIMER uses a configuration file to set reference sources of annotation (e.g. contaminants), controls and external tools (decontam, mgnify). The configuration can be provided with the argument -c/--config and it should be in the YAML format. A basic example of a configuration file: references: \"Contaminants\": \"files/contaminants.yml\" \"Human-related\": \"files/human-related.yml\" controls: \"Negative Controls\": \"path/file1.tsv\" \"Positve Controls\": \"Metadata_Field\": - \"Metadata_Value1\" - \"Metadata_Value2\" external: mgnify: \"files/mgnify5989.tsv\" decontam: threshold: 0.1 method: \"frequency\" references References can be provided as an external .yml/.yaml file in a specific format (see below) or in a text file with one taxonomic identifier or taxonomic name per line. \"General Description\": \"Specific description\": url: \"www.website.com?id={}\" ids: [1,2,3] A real example of saliva organisms extracted from BacDive: \"Human-related bacterial isolates from BacDive\": \"Saliva\": url: \"https://bacdive.dsmz.de/search?search=taxid:{}\" ids: [152331, 113107, 157688, 979627, 45634, 60133, 157687, 1624, 1583331, 1632, 249188] Common contaminants compiled from the literature and human-related possible sources of contamination are available in the GRIMER repository . For more information, please refer to the pre-print . If the target study overlaps with some of those annotation (e.g. study of human skin), related entries can be easily removed from those files to not generated redundant annotations. controls Several control groups cann be provided. A file with one sample identifier per line controls: \"Controls\": \"controls.txt\" or as a metadata field and value(s). controls: \"Other Controls\": \"sample_type\": # field - \"blank\" # value - \"control\" # value Both can be combined into one configuration file. external Here it's possible to configure the function of external tools executed by GRIMER. mgnify GRIMER can use a parsed MGnify database to annotate observations and link them to the respective MGnify entry, reporting most common biome occurrences. Instructions on how to re-generate the parsed database from MGnify can be found here . A pre-parsed database is availble in the GRIMER repository (generated on 2022-03-09). To use it, please set the file in the configuration as follows and activate it with the -g/--mgnify when running GRIMER. external: mgnify: \"files/mgnify5989.tsv\" decontam GRIMER can run DECONTAM with -d/--decontam , but some configuration is necessary. It is possible to set the threshold (P* hyperparameter) and the method (frequency, prevalence, combined). For the frequency/combined method, the DNA frequency for each sample has to be provided either in a .tsv file (sample identifier frequency) or a metadata field. If none is provided, the sum of all counts in the contigency table is used for the frequency calculation, but this is not recommended. For the prevalence/combined method, file(s) with a list of sample identifiers can be provided or a field:value in the metadata. If none is provided, all samples defined in the \"controls\" are considered for the prevalence calculation. Below an example of how to provide those values in the configuration file: external: decontam: threshold: 0.1 # [0-1] P* hyperparameter method: \"frequency\" # frequency, prevalence, combined # frequency_file: \"path/file1.txt\" # frequency_metadata: \"Field1\" # prevalence_file: # - \"path/file1.txt\" # - \"path/file2.txt\" # prevalence_metadata: # \"Field1\": # - \"ValueA\" # - \"ValueB\" # \"Field2\": # - \"ValueC\"","title":"Configuration file"},{"location":"config/#config-files","text":"GRIMER uses a configuration file to set reference sources of annotation (e.g. contaminants), controls and external tools (decontam, mgnify). The configuration can be provided with the argument -c/--config and it should be in the YAML format. A basic example of a configuration file: references: \"Contaminants\": \"files/contaminants.yml\" \"Human-related\": \"files/human-related.yml\" controls: \"Negative Controls\": \"path/file1.tsv\" \"Positve Controls\": \"Metadata_Field\": - \"Metadata_Value1\" - \"Metadata_Value2\" external: mgnify: \"files/mgnify5989.tsv\" decontam: threshold: 0.1 method: \"frequency\"","title":"Config files"},{"location":"config/#references","text":"References can be provided as an external .yml/.yaml file in a specific format (see below) or in a text file with one taxonomic identifier or taxonomic name per line. \"General Description\": \"Specific description\": url: \"www.website.com?id={}\" ids: [1,2,3] A real example of saliva organisms extracted from BacDive: \"Human-related bacterial isolates from BacDive\": \"Saliva\": url: \"https://bacdive.dsmz.de/search?search=taxid:{}\" ids: [152331, 113107, 157688, 979627, 45634, 60133, 157687, 1624, 1583331, 1632, 249188] Common contaminants compiled from the literature and human-related possible sources of contamination are available in the GRIMER repository . For more information, please refer to the pre-print . If the target study overlaps with some of those annotation (e.g. study of human skin), related entries can be easily removed from those files to not generated redundant annotations.","title":"references"},{"location":"config/#controls","text":"Several control groups cann be provided. A file with one sample identifier per line controls: \"Controls\": \"controls.txt\" or as a metadata field and value(s). controls: \"Other Controls\": \"sample_type\": # field - \"blank\" # value - \"control\" # value Both can be combined into one configuration file.","title":"controls"},{"location":"config/#external","text":"Here it's possible to configure the function of external tools executed by GRIMER.","title":"external"},{"location":"config/#mgnify","text":"GRIMER can use a parsed MGnify database to annotate observations and link them to the respective MGnify entry, reporting most common biome occurrences. Instructions on how to re-generate the parsed database from MGnify can be found here . A pre-parsed database is availble in the GRIMER repository (generated on 2022-03-09). To use it, please set the file in the configuration as follows and activate it with the -g/--mgnify when running GRIMER. external: mgnify: \"files/mgnify5989.tsv\"","title":"mgnify"},{"location":"config/#decontam","text":"GRIMER can run DECONTAM with -d/--decontam , but some configuration is necessary. It is possible to set the threshold (P* hyperparameter) and the method (frequency, prevalence, combined). For the frequency/combined method, the DNA frequency for each sample has to be provided either in a .tsv file (sample identifier frequency) or a metadata field. If none is provided, the sum of all counts in the contigency table is used for the frequency calculation, but this is not recommended. For the prevalence/combined method, file(s) with a list of sample identifiers can be provided or a field:value in the metadata. If none is provided, all samples defined in the \"controls\" are considered for the prevalence calculation. Below an example of how to provide those values in the configuration file: external: decontam: threshold: 0.1 # [0-1] P* hyperparameter method: \"frequency\" # frequency, prevalence, combined # frequency_file: \"path/file1.txt\" # frequency_metadata: \"Field1\" # prevalence_file: # - \"path/file1.txt\" # - \"path/file2.txt\" # prevalence_metadata: # \"Field1\": # - \"ValueA\" # - \"ValueB\" # \"Field2\": # - \"ValueC\"","title":"decontam"},{"location":"examples/","text":"Examples of reports generated with GRIMER Data analysis from Leiby et al. \"Lack of detection of a human placenta microbiome in samples from preterm and term deliveries\" original publication: 10.1186/s40168-018-0575-4 GRIMER report MGS GRIMER report AMPLICON commands used to create report # Download files (table, metadata and config) wget https://raw.githubusercontent.com/pirovc/grimer-reports/main/placenta/placenta_files.tar.gz tar xf placenta_files.tar.gz # AMPLICON grimer --config placenta_amplicon_config.yaml \\ --input-file placenta_amplicon_table.tsv \\ --metadata-file placenta_metadata.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species \\ --level-separator \";\" \\ --obs-replace \"^.+__\" \"\" \"_\" \" \" \\ --unassigned-header \"Unassigned\" \\ --decontam --mgnify --transpose \\ --title \"Placenta study AMPLICON - Leiby, J.S. et al 2018\" \\ --output-html placenta_amplicon.html # MGS grimer --config placenta_mgs_config.yaml \\ --input-file placenta_mgs_table.tsv \\ --metadata-file placenta_metadata.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species \\ --level-separator \"|\" \\ --unassigned-header \"unassigned\" \\ --decontam --mgnify \\ --title \"Placenta study MGS - Leiby, J.S. et al 2018\" \\ --output-html placenta_mgs.html KatharoSeq analysis from Minich et al. \"KatharoSeq Enables High-Throughput Microbiome Analysis from Low-Biomass Samples\" original publication: 10.1128/mSystems.00218-17 GRIMER report commands used to create report # Download files (table, metadata and config) wget https://raw.githubusercontent.com/pirovc/grimer-reports/main/katharoseq/katharoseq_files.tar.gz tar xf katharoseq_files.tar.gz # Run GRIMER grimer --config katharoseq_config.yaml \\ --input-file katharoseq_table.tsv \\ --metadata-file katharoseq_metadata.tsv \\ --transformation clr \\ --obs-replace \"^.+__\" \"\" \"_\" \" \" \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species \\ --level-separator \";\" \\ --decontam --mgnify \\ --title \"KatharoSeq - Minich et al. 2018\" \\ --output-html katharoseq.html Preterm Infant Resistome downloaded from MicrobiomeDB original publication: 10.1038/nmicrobiol.2016.24 GRIMER report commands used to create report # Download files (table, metadata and config) - Original source: https://microbiomedb.org/common/downloads/release-22/82fe0308e2032de2041694df6592ba542ea84b86/ResistomeAmplicon.16s_DADA2.taxon_abundance.biom wget https://raw.githubusercontent.com/pirovc/grimer-reports/main/microbiomedb/microbiomedb_files.tar.gz tar xf microbiomedb_files.tar.gz # Run GRIMER grimer --config config/default.yaml \\ --input-file ResistomeAmplicon.16s_DADA2.taxon_abundance.biom \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species \\ --decontam --mgnify \\ --title \"MicrobiomeDB Preterm Infant Resistome (V4)\" \\ --output-html ResistomeAmplicon.html Antibiotic induced changes in the microbiota disrupt redox dynamics in the gut downloaded from MGnify original publication 10.7554/elife.35987 GRIMER report commands used to create report # Script to download files and generate GRIMER report from any MGnify study accession # Requires \"jsonapi-client>=0.9.7\" (conda install \"jsonapi-client>=0.9.7\") ./grimer-mgnify.py -i MGYS00005180 -o MGYS00005180 -g \"--decontam --mgnify\" # Or directly from files wget https://raw.githubusercontent.com/pirovc/grimer-reports/main/mgnify/mgnify_files.tar.gz tar xf mgnify.tar.gz # Run GRIMER grimer --config config/default.yaml \\ --input-file MGYS00005180_ERP108433_taxonomy_abundances_SSU_v4.1.tsv \\ --metadata-file MGYS00005180_metadata.tsv \\ --obs-replace \"^.+__\" \"\" \"_\" \" \" \\ --taxonomy ncbi \\ --ranks superkingdom kingdom phylum class order family genus species \\ --level-separator \";\" \\ --decontam --mgnify \\ --title \"MGnify study accession MGYS00005180\" \\ --output-html MGYS00005180.html","title":"GRIMER Reports - Examples"},{"location":"examples/#data-analysis-from-leiby-et-al-lack-of-detection-of-a-human-placenta-microbiome-in-samples-from-preterm-and-term-deliveries","text":"original publication: 10.1186/s40168-018-0575-4 GRIMER report MGS GRIMER report AMPLICON commands used to create report # Download files (table, metadata and config) wget https://raw.githubusercontent.com/pirovc/grimer-reports/main/placenta/placenta_files.tar.gz tar xf placenta_files.tar.gz # AMPLICON grimer --config placenta_amplicon_config.yaml \\ --input-file placenta_amplicon_table.tsv \\ --metadata-file placenta_metadata.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species \\ --level-separator \";\" \\ --obs-replace \"^.+__\" \"\" \"_\" \" \" \\ --unassigned-header \"Unassigned\" \\ --decontam --mgnify --transpose \\ --title \"Placenta study AMPLICON - Leiby, J.S. et al 2018\" \\ --output-html placenta_amplicon.html # MGS grimer --config placenta_mgs_config.yaml \\ --input-file placenta_mgs_table.tsv \\ --metadata-file placenta_metadata.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species \\ --level-separator \"|\" \\ --unassigned-header \"unassigned\" \\ --decontam --mgnify \\ --title \"Placenta study MGS - Leiby, J.S. et al 2018\" \\ --output-html placenta_mgs.html","title":"Data analysis from Leiby et al. \"Lack of detection of a human placenta microbiome in samples from preterm and term deliveries\""},{"location":"examples/#katharoseq-analysis-from-minich-et-al-katharoseq-enables-high-throughput-microbiome-analysis-from-low-biomass-samples","text":"original publication: 10.1128/mSystems.00218-17 GRIMER report commands used to create report # Download files (table, metadata and config) wget https://raw.githubusercontent.com/pirovc/grimer-reports/main/katharoseq/katharoseq_files.tar.gz tar xf katharoseq_files.tar.gz # Run GRIMER grimer --config katharoseq_config.yaml \\ --input-file katharoseq_table.tsv \\ --metadata-file katharoseq_metadata.tsv \\ --transformation clr \\ --obs-replace \"^.+__\" \"\" \"_\" \" \" \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species \\ --level-separator \";\" \\ --decontam --mgnify \\ --title \"KatharoSeq - Minich et al. 2018\" \\ --output-html katharoseq.html","title":"KatharoSeq analysis from Minich et al. \"KatharoSeq Enables High-Throughput Microbiome Analysis from Low-Biomass Samples\""},{"location":"examples/#preterm-infant-resistome-downloaded-from-microbiomedb","text":"original publication: 10.1038/nmicrobiol.2016.24 GRIMER report commands used to create report # Download files (table, metadata and config) - Original source: https://microbiomedb.org/common/downloads/release-22/82fe0308e2032de2041694df6592ba542ea84b86/ResistomeAmplicon.16s_DADA2.taxon_abundance.biom wget https://raw.githubusercontent.com/pirovc/grimer-reports/main/microbiomedb/microbiomedb_files.tar.gz tar xf microbiomedb_files.tar.gz # Run GRIMER grimer --config config/default.yaml \\ --input-file ResistomeAmplicon.16s_DADA2.taxon_abundance.biom \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species \\ --decontam --mgnify \\ --title \"MicrobiomeDB Preterm Infant Resistome (V4)\" \\ --output-html ResistomeAmplicon.html","title":"Preterm Infant Resistome downloaded from MicrobiomeDB"},{"location":"examples/#antibiotic-induced-changes-in-the-microbiota-disrupt-redox-dynamics-in-the-gut-downloaded-from-mgnify","text":"original publication 10.7554/elife.35987 GRIMER report commands used to create report # Script to download files and generate GRIMER report from any MGnify study accession # Requires \"jsonapi-client>=0.9.7\" (conda install \"jsonapi-client>=0.9.7\") ./grimer-mgnify.py -i MGYS00005180 -o MGYS00005180 -g \"--decontam --mgnify\" # Or directly from files wget https://raw.githubusercontent.com/pirovc/grimer-reports/main/mgnify/mgnify_files.tar.gz tar xf mgnify.tar.gz # Run GRIMER grimer --config config/default.yaml \\ --input-file MGYS00005180_ERP108433_taxonomy_abundances_SSU_v4.1.tsv \\ --metadata-file MGYS00005180_metadata.tsv \\ --obs-replace \"^.+__\" \"\" \"_\" \" \" \\ --taxonomy ncbi \\ --ranks superkingdom kingdom phylum class order family genus species \\ --level-separator \";\" \\ --decontam --mgnify \\ --title \"MGnify study accession MGYS00005180\" \\ --output-html MGYS00005180.html","title":"Antibiotic induced changes in the microbiota disrupt redox dynamics in the gut downloaded from MGnify"},{"location":"importing/","text":"Importing files GRIMER is independent of any quantification method and requires a contingency table with raw counts of observations/components for each samples/compositions in the study. Observations are usually, but not limited to, taxonomic entries (e.g. genus, species, strains), operational taxonomic units (OTUs), amplicon sequence variants (ASVs), metagenome-assembled genomes (MAGs) or sequence features. GRIMER --input-file receives a file with tab-separated values (.tsv) containing a table of counts (Observation table, Count table, Contingency Tables, ...) or a BIOM file. biom file GRIMER parses BIOM files and affiliated metadata (if available). Alternatively, an external metadata file can be provided with -m/--metadata . Example UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom file from microbiomedb.org Default report (no taxonomy) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom With integrated NCBI taxonomy (will translate names to taxids) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species tab-separated file (.tsv) GRIMER parses .tsv files with single taxonomic identifier/names annotations or with multi-level (e.g.: lineage) taxonomic annotated observations. Rows contain observations and columns contain samples (use --transpose if your file is reversed) First column and first row are used as headers Taxonomy integration: files can have either taxonomic identifiers (NCBI, e.g.: 562) or taxonomic names (NCBI, e.g.: Escherichia coli or GTDB, e.g.: s__Escherichia coli) Multi-level annotations (e.g. Bacteria;Proteobacteria;Gammaproteobacteria...) Example UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv file from microbiomedb.org grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" With metadata ( UgandaMaternalV3V4.16s_DADA2.sample_details.tsv ) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" \\ --metadata-file UgandaMaternalV3V4.16s_DADA2.sample_details.tsv With integrated NCBI taxonomy (will translate names to taxids) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" \\ --metadata-file UgandaMaternalV3V4.16s_DADA2.sample_details.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species Single level annotations (e.g. Neisseria animalis) Example ERP108433_phylum_taxonomy_abundances_SSU_v4.1.tsv from MGnify , phylum level only # Removing first column with kingdom cut -f 2- ERP108433_phylum_taxonomy_abundances_SSU_v4.1.tsv > ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv # Set identifier for unassigned observations as \"Unassigned\" (many occurences, will be summed) grimer --input-file ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv \\ --unassigned-header \"Unassigned\" Re-generating taxonomic lineage from single annotations (in this case only superkingdom) grimer --input-file ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv \\ --unassigned-header \"Unassigned\" \\ --taxonomy ncbi \\ --ranks superkingdom phylum Special cases --obs-replace --sample-replace --cumm-levels --transpose From commonly used tools/sources ganon ganon table --input *.tre \\ --output-file ganon_table.tsv \\ --header taxid \\ --rank species grimer --input-file ganon_table.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species MetaPhlAn # merge_metaphlan_tables.py is available with the metaphlan package merge_metaphlan_tables.py *.tsv | head -n+2 > metaphlan_table.tsv grimer --input-file metaphlan_table.tsv \\ --level-separator \"|\" \\ --obs-replace '^.+__' '' '_' ' ' \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species QIIME2 feature table (.qza) Example feature-table.qza from QIIME2 docs qiime tools export --input-path feature-table.qza --output-path exported-feature-table grimer --input-file exported-feature-table/feature-table.biom MGnify grimer-mgnify.py will download and generate a GRIMER report for any MGnify study accession (e.g. MGYS00006024) # Install API dependency conda install \"jsonapi-client>=0.9.7\" ./grimer-mgnify.py -i MGYS00006024 -o out_folder_mgnify/ phyloseq #source(\"http://bioconductor.org/biocLite.R\") #biocLite(\"biomformat\") #biocLite('phyloseq') library(\"biomformat\") library('phyloseq') data(soilrep) b <- make_biom(data = otu_table(soilrep)) write_biom(b, 'out.biom') grimer --input-file out.biom","title":"Importing files"},{"location":"importing/#importing-files","text":"GRIMER is independent of any quantification method and requires a contingency table with raw counts of observations/components for each samples/compositions in the study. Observations are usually, but not limited to, taxonomic entries (e.g. genus, species, strains), operational taxonomic units (OTUs), amplicon sequence variants (ASVs), metagenome-assembled genomes (MAGs) or sequence features. GRIMER --input-file receives a file with tab-separated values (.tsv) containing a table of counts (Observation table, Count table, Contingency Tables, ...) or a BIOM file.","title":"Importing files"},{"location":"importing/#biom-file","text":"GRIMER parses BIOM files and affiliated metadata (if available). Alternatively, an external metadata file can be provided with -m/--metadata . Example UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom file from microbiomedb.org Default report (no taxonomy) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom With integrated NCBI taxonomy (will translate names to taxids) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.biom \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species","title":"biom file"},{"location":"importing/#tab-separated-file-tsv","text":"GRIMER parses .tsv files with single taxonomic identifier/names annotations or with multi-level (e.g.: lineage) taxonomic annotated observations. Rows contain observations and columns contain samples (use --transpose if your file is reversed) First column and first row are used as headers Taxonomy integration: files can have either taxonomic identifiers (NCBI, e.g.: 562) or taxonomic names (NCBI, e.g.: Escherichia coli or GTDB, e.g.: s__Escherichia coli)","title":"tab-separated file (.tsv)"},{"location":"importing/#multi-level-annotations-eg-bacteriaproteobacteriagammaproteobacteria","text":"Example UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv file from microbiomedb.org grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" With metadata ( UgandaMaternalV3V4.16s_DADA2.sample_details.tsv ) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" \\ --metadata-file UgandaMaternalV3V4.16s_DADA2.sample_details.tsv With integrated NCBI taxonomy (will translate names to taxids) grimer --input-file UgandaMaternalV3V4.16s_DADA2.taxon_abundance.tsv \\ --level-separator \";\" \\ --metadata-file UgandaMaternalV3V4.16s_DADA2.sample_details.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species","title":"Multi-level annotations (e.g. Bacteria;Proteobacteria;Gammaproteobacteria...)"},{"location":"importing/#single-level-annotations-eg-neisseria-animalis","text":"Example ERP108433_phylum_taxonomy_abundances_SSU_v4.1.tsv from MGnify , phylum level only # Removing first column with kingdom cut -f 2- ERP108433_phylum_taxonomy_abundances_SSU_v4.1.tsv > ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv # Set identifier for unassigned observations as \"Unassigned\" (many occurences, will be summed) grimer --input-file ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv \\ --unassigned-header \"Unassigned\" Re-generating taxonomic lineage from single annotations (in this case only superkingdom) grimer --input-file ERP108433_phylum_taxonomy_abundances_SSU_v4.1_parsed.tsv \\ --unassigned-header \"Unassigned\" \\ --taxonomy ncbi \\ --ranks superkingdom phylum","title":"Single level annotations (e.g. Neisseria animalis)"},{"location":"importing/#special-cases","text":"--obs-replace --sample-replace --cumm-levels --transpose","title":"Special cases"},{"location":"importing/#from-commonly-used-toolssources","text":"","title":"From commonly used tools/sources"},{"location":"importing/#ganon","text":"ganon table --input *.tre \\ --output-file ganon_table.tsv \\ --header taxid \\ --rank species grimer --input-file ganon_table.tsv \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species","title":"ganon"},{"location":"importing/#metaphlan","text":"# merge_metaphlan_tables.py is available with the metaphlan package merge_metaphlan_tables.py *.tsv | head -n+2 > metaphlan_table.tsv grimer --input-file metaphlan_table.tsv \\ --level-separator \"|\" \\ --obs-replace '^.+__' '' '_' ' ' \\ --taxonomy ncbi \\ --ranks superkingdom phylum class order family genus species","title":"MetaPhlAn"},{"location":"importing/#qiime2-feature-table-qza","text":"Example feature-table.qza from QIIME2 docs qiime tools export --input-path feature-table.qza --output-path exported-feature-table grimer --input-file exported-feature-table/feature-table.biom","title":"QIIME2 feature table (.qza)"},{"location":"importing/#mgnify","text":"grimer-mgnify.py will download and generate a GRIMER report for any MGnify study accession (e.g. MGYS00006024) # Install API dependency conda install \"jsonapi-client>=0.9.7\" ./grimer-mgnify.py -i MGYS00006024 -o out_folder_mgnify/","title":"MGnify"},{"location":"importing/#phyloseq","text":"#source(\"http://bioconductor.org/biocLite.R\") #biocLite(\"biomformat\") #biocLite('phyloseq') library(\"biomformat\") library('phyloseq') data(soilrep) b <- make_biom(data = otu_table(soilrep)) write_biom(b, 'out.biom') grimer --input-file out.biom","title":"phyloseq"},{"location":"manual/","text":"GRIMER Reports - User Manual Overview Table, filtering table contents, selecting taxa Info, References, MGnify, DECONTAM plots Bars: annotations, sorting, grouping, transforming axis Samples Heatmap Correlation","title":"GRIMER Reports - User Manual"},{"location":"manual/#grimer-reports-user-manual","text":"","title":"GRIMER Reports - User Manual"},{"location":"manual/#overview","text":"Table, filtering table contents, selecting taxa Info, References, MGnify, DECONTAM plots Bars: annotations, sorting, grouping, transforming axis","title":"Overview"},{"location":"manual/#samples","text":"","title":"Samples"},{"location":"manual/#heatmap","text":"","title":"Heatmap"},{"location":"manual/#correlation","text":"","title":"Correlation"}]}